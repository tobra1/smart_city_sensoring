
/*
 * Made by Tobias Brasch, s113618@student.dtu.dk
 * Main file for gprs_sensor_box, which contains the code
 * that will run on the device.
 */


//Libraries
#include <LEEPROM.h>

//Variables used by this file
int version = 1;
String UUID = "";

//Wait times for each sensor
long gps_waitTime = 86400000, dht_waitTime = 60000, multigas_waitTime = 60000, 
  dust_waitTime = 60000, barometer_waitTime = 60000, sound_waitTime = 5000, 
  sunlight_waitTime = 60000, co2_waitTime = 60000;
  
//Last run for each sensor
long gps_lastStep, dht_lastStep, multigas_lastStep, dust_lastStep, 
  barometer_lastStep, sound_lastStep, sunlight_lastStep, co2_lastStep;

/*
 * If new unit post the version number to the server and
 * getting the uuid generated by the database and saves it
 * to the EEPROM and the UUID variable. Else it finds the 
 * UUID in the EEPROM and saves to the UUID variable.
 */
void addIdToEEPROM(){
  if(EEPROM.read(1) == 0){
    connectToServer();

    resetJSON();
    addOtherVariable("version", (String) version);
    
    String id = idGenerator();

    char str[id.length()];
    id.toCharArray(str,id.length()+1);
  
    for(int i = 0; i < id.length(); i++){
      EEPROM.write(i, (int)str[i]);
    }
    
    Serial.print("New UUID: ");
    for(int i = 0; i < id.length(); i++){
      UUID += (char)EEPROM.read(i);
    }
    Serial.println(UUID);
    Serial.println();
    disconnectServer();
  }
  else {
    Serial.print("UUID: ");
    for(int i = 0; i < 36; i++){
      UUID += (char)EEPROM.read(i);
    }
    Serial.println(UUID);
    Serial.println();
  }
}

void setup() { 
  Serial.begin(115200);

  for(int i = 0; i < 100; i++){
    EEPROM.write(i, 0);
  }

  Serial.println("Initialising");
  addIdToEEPROM();

  Serial.println("Starts sensors");
  setupDHT();
  setupMultigas();
  setupDust();
  setupBarometer();
  setupSound();
  setupSunlight();
  setupCO2();
  
  Serial.println("Finished initialising");
}

void loop() {
  /* 
   * At the moment a new connection has to be made for each
   * post. This should be looked at so we can get through 
   * the loop faster.
   * 
   * There also is a need for a way to check if the sensor 
   * is connected, so the database won be populated with 
   * readings from sensors not connected to device.
   * This can maybe be done by using the error reading part.
   * 
   */

  Serial.println();
  String p;
  //Finding location and posting it to server.
  if((millis()-gps_lastStep) > gps_waitTime || isnan(gps_lastStep) || gps_lastStep == 0){
    Serial.println("GPS");
    p = getCurrentPosition();
    Serial.println(p);
    connectToServer();
    post(p,getTableGPS());
    disconnectServer();
    gps_lastStep = millis();
  }

  
  if((millis()-dht_lastStep) > dht_waitTime || isnan(dht_lastStep)){
    Serial.println("DHT");
    //Finding DHT and posting it to server
    p = getDHT();
    if(!isDhtERROR()){
      Serial.println(p);
      connectToServer();
      post(p,getTableDHT());
      disconnectServer();
    }
    dht_lastStep = millis();
  }
  
  if((millis()-multigas_lastStep) > multigas_waitTime || isnan(multigas_lastStep)){
    Serial.println("Multigas");
    //Finding multigas and posting it to server
    p = multigasReading();
    if(!isMultigasError()){
      Serial.println(p);
      connectToServer();
      post(p,getTableMultigas());
      disconnectServer();
    }
    multigas_lastStep = millis();
  }

  //Not part of first version reason lack of space in box
  /*if((millis()-dust_lastStep) > dust_waitTime || isnan(dust_lastStep)){
    Serial.println("Dust");
    p = dustReading();
    if(!isDustError()){
      Serial.println(p);
      connectToServer();
      post(p,getTableDust());
      disconnectServer();
    }
    dust_lastStep = millis();
  }*/
  
  if((millis()-barometer_lastStep) > barometer_waitTime || isnan(barometer_lastStep)){
    Serial.println("Barometer");
    p = barometerReading();
    if(!isBarometerError()){
      Serial.println(p);
      connectToServer();
      post(p,getTableBarometer());
      disconnectServer();
    }
    barometer_lastStep = millis();
  }
  
  if((millis()-sound_lastStep) > sound_waitTime || isnan(sound_lastStep)){
    Serial.println("Sound");
    p = soundReading();
    if(!isSoundError()){
      Serial.println(p);
      connectToServer();
      post(p,getTableSound());
      disconnectServer();
    }
    sound_lastStep = millis();
  }
  
  if((millis()-sunlight_lastStep) > sunlight_waitTime || isnan(sunlight_lastStep)){
    Serial.println("Sunlight");
    p = sunlightReading();
    if(!isSunlightError()){
      Serial.println(p);
      connectToServer();
      post(p,getTableSunlight());
      disconnectServer();
    }
    sunlight_lastStep = millis();
  }
  
  if((millis()-co2_lastStep) > co2_waitTime || isnan(co2_lastStep)){
    Serial.println("CO2");
    p = co2Reading();
    if(!isCO2Error()){
      Serial.println(p);
      connectToServer();
      post(p,getTableCO2());
      disconnectServer();
    }
    co2_lastStep = millis();
  }
  delay(5000);
}
